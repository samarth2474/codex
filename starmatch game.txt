// v1 STAR MATCH - Starting Template
//Stars component
const StarDisplay = props => (
  <> 
    {utils.range(1,props.count).map(starId => <div  key = {starId} className ='star' /> 
    )}
   </> 
);
//playnumber component. Extracting components for readability and reuseability
const PlayNumber = props =>(
  <button 
    className ='number' 
    style ={{backgroundColor: colors[props.status]}}
    onClick ={() =>props.onClick(props.number,props.status) }
    >
    {props.number}
  </button>
);


const PlayAgain =(props) => (
  <div>
    <div 
      className = 'message'
      style = {{color: props.gameStatus === 'won'?'green':'red'}}
      >
      {props.gameStatus === 'won'?'Game Won':'Game Lost'}
    </div>
    <button className ='game.done' onClick ={props.onClick}>
      Play again
    </button>
  </div>
);

const Game = (props) => {
  //wrongNums and usedNums can be calculated from candidateNums and availableNums resp
  const [availableNums, setAvailableNums] = useState(utils.range(1,9));
  const [candidateNums, setCandidateNums] =useState([]);
  //Making stars a React state element so that React can detect change in state in the UI 
  const [stars, setStars]  = useState(utils.random(1,9));
  //timer React state
  const [secondsLeft, setSecondsLeft] =useState(10);
  useEffect(()=>{
    if (secondsLeft > 0 && availableNums.length >0 ){
        const timerId = setTimeout(()=> {
          setSecondsLeft(secondsLeft-1)
          }, 1000)
        return ()=> { clearTimeout(timerId)};
      };
    
    }
  );
  //check whether candidateNums are wrong
  const candidatesAreWrong = utils.sum(candidateNums)>stars;
  //check Status of the game
  const gameStatus = availableNums.length === 0
    ? 'won'
    : (secondsLeft === 0 ? 'lost':'active');
  // alternate reset Game
  /*const resetGame =() => {
    setStars(utils.random(1,9));
    setAvailableNums(utils.range(1,9));
    setCandidateNums([]);
  }
  */
  //events on clicking a number
  const onNumberClick =(number,currentStatus) =>{
    //check game status and current status
    if(gameStatus !== 'active' || currentStatus ==='used') {
      return;
    };
   const newCandidateNums =
      currentStatus === 'available'
         ? candidateNums.concat(number) 
         : candidateNums.filter(cn => cn !== number);
    //sum of candidate numbers not equal to number of stars
   if(utils.sum(newCandidateNums)!==stars){
     setCandidateNums(newCandidateNums);
   } else{ //correct pick
     const newAvailableNums = availableNums.filter(
     n => !newCandidateNums.includes(n)
     );
     //redraw stars (from whats available)
     setStars(utils.randomSumIn(newAvailableNums,9));
     setAvailableNums(newAvailableNums);
     setCandidateNums([]);
   };
  };
  //check Number status as used, available, candidate or wrong
  const numberStatus =(number) => {
    if (!availableNums.includes(number)){
      return 'used';
    };
    if (candidateNums.includes(number)) {
      return candidatesAreWrong?'wrong':'candidate';
    };
    return 'available';
  };
  return (
    <div className="game">
      <div className="help">
        Pick 1 or more numbers that sum to the number of stars
      </div>
      <div className="body">
        <div className="left">
          {gameStatus !== 'active' ? (
          <PlayAgain onClick= {props.startNewGame} gameStatus = {gameStatus}/>
          ) : (
          <StarDisplay count ={stars}/>
          )}     
        </div>
        <div className="right">
          {utils.range(1,9).map(number => 
          <PlayNumber 
            key= {number}
            status ={numberStatus(number)}
            number ={number}
            onClick = {onNumberClick}
            />
          )}
        </div>
      </div>
      <div className="timer">Time Remaining: {secondsLeft}</div>
    </div>
  );
};


const StarMatch =()=> {
  // Using GameId to reset the game 
  const [gameId, setGameId] = useState(1);
  return <Game key={gameId} startNewGame ={ () => setGameId(gameId + 1)} />;
};

// Color Theme
const colors = {
  available: 'lightgray',
  used: 'lightgreen',
  wrong: 'lightcoral',
  candidate: 'deepskyblue',
};

// Math science
const utils = {
  // Sum an array
  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),

  // create an array of numbers between min and max (edges included)
  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),

  // pick a random number between min and max (edges included)
  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),

  // Given an array of numbers and a max...
  // Pick a random sum (< max) from the set of all available sums in arr
  randomSumIn: (arr, max) => {
    const sets = [[]];
    const sums = [];
    for (let i = 0; i < arr.length; i++) {
      for (let j = 0, len = sets.length; j < len; j++) {
        const candidateSet = sets[j].concat(arr[i]);
        const candidateSum = utils.sum(candidateSet);
        if (candidateSum <= max) {
          sets.push(candidateSet);
          sums.push(candidateSum);
        }
      }
    }
    return sums[utils.random(0, sums.length - 1)];
  },
};

ReactDOM.render(<StarMatch />, mountNode);